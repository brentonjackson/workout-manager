[{"/Users/brentonjackson/code/workout-manager/frontend/src/index.js":"1","/Users/brentonjackson/code/workout-manager/frontend/src/App.js":"2","/Users/brentonjackson/code/workout-manager/frontend/src/components/edit-workout.component.js":"3","/Users/brentonjackson/code/workout-manager/frontend/src/components/create-workout.component.js":"4","/Users/brentonjackson/code/workout-manager/frontend/src/components/Dashboard.js":"5","/Users/brentonjackson/code/workout-manager/frontend/src/components/workout-list.component.js":"6","/Users/brentonjackson/code/workout-manager/frontend/src/components/WorkoutLog.js":"7"},{"size":284,"mtime":1635354134958,"results":"8","hashOfConfig":"9"},{"size":4591,"mtime":1660594835393,"results":"10","hashOfConfig":"9"},{"size":7929,"mtime":1636425373813,"results":"11","hashOfConfig":"9"},{"size":7933,"mtime":1636482818479,"results":"12","hashOfConfig":"9"},{"size":968,"mtime":1635354134957,"results":"13","hashOfConfig":"9"},{"size":6214,"mtime":1636514588048,"results":"14","hashOfConfig":"9"},{"size":1109,"mtime":1636910474664,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1a9bv2j",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/Users/brentonjackson/code/workout-manager/frontend/src/index.js",[],["34","35"],"/Users/brentonjackson/code/workout-manager/frontend/src/App.js",[],"/Users/brentonjackson/code/workout-manager/frontend/src/components/edit-workout.component.js",["36"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Button from \"react-bootstrap/Button\";\nimport styled from \"styled-components\";\nimport { Redirect } from \"react-router-dom\";\n\nconst UpdateDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: white;\n  margin: 0px 0 50px;\n\n  @media (min-width: 426px) {\n    width: 80%;\n    max-width: 700px;\n  }\n`;\nconst Title = styled.h3`\n  margin: 25px 0 35px;\n  text-align: center;\n  @media (min-width: 992px) {\n    margin: 0 0 50px;\n  }\n`;\n\nexport default class EditWorkout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      redirect: null,\n      workout_title: \"\",\n      duration: undefined,\n      exercises: [{ name: \"\", sets: 0, reps: 0, weight: 0 }],\n      date: new Date().toString(),\n    };\n\n    this.onChangeWorkoutTitle = this.onChangeWorkoutTitle.bind(this);\n    this.onChangeExerciseName = this.onChangeExerciseName.bind(this);\n    this.onChangeExerciseSets = this.onChangeExerciseSets.bind(this);\n    this.onChangeExerciseReps = this.onChangeExerciseReps.bind(this);\n    this.onChangeExerciseWeight = this.onChangeExerciseWeight.bind(this);\n    this.onChangeDuration = this.onChangeDuration.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.deleteWorkout = this.deleteWorkout.bind(this);\n  }\n\n  componentDidMount(){   \n    if (localStorage.length > 0) {\n      let id = window.location.pathname.split(\"/\")[2]\n      let keys = Object.keys(localStorage)\n      keys.forEach((key, index) => {\n        if (key === id) {\n          this.setState(JSON.parse(localStorage.getItem(key)));\n          this.setState({local: true});\n          this.state.local = true;\n        }\n      })\n    } \n    if (!this.state.local) {\n      const baseUrl =\n      process.env.NODE_ENV === \"production\"\n        ? \"https://intense-ridge-39955.herokuapp.com/\"\n        : \"http://localhost:4000/\";\n\n      axios\n        .get(baseUrl + \"workouts/\" + this.props.match.params.id)\n        .then((response) => {\n          this.setState({\n            workout_title: response.data.workout_title,\n            duration: response.data.duration,\n            exercises: response.data.exercises,\n            date: response.data.date,\n          });\n        })\n        .catch(function (error) {\n          console.log(error)\n        });\n      }\n  }\n\n  componentWillUnmount() {\n    // fix Warning: Can't perform a React state update on an unmounted component\n    this.setState = (state, callback) => {\n      return;\n    };\n  }\n\n  // methods to update state\n  onChangeWorkoutTitle(e) {\n    this.setState({\n      workout_title: e.target.value,\n    });\n  }\n\n  onChangeExerciseName(i, e) {\n    let stateCopy = Object.assign({}, this.state);\n    stateCopy.exercises[i].name = e.target.value;\n    this.setState(stateCopy);\n  }\n  onChangeExerciseSets(i, e) {\n    let stateCopy = Object.assign({}, this.state);\n    stateCopy.exercises[i].sets = e.target.value;\n    this.setState(stateCopy);\n  }\n  onChangeExerciseReps(i, e) {\n    let stateCopy = Object.assign({}, this.state);\n    stateCopy.exercises[i].reps = e.target.value;\n    this.setState(stateCopy);\n  }\n  onChangeExerciseWeight(i, e) {\n    let stateCopy = Object.assign({}, this.state);\n    stateCopy.exercises[i].weight = e.target.value;\n    this.setState(stateCopy);\n  }\n  onChangeDuration(e) {\n    this.setState({\n      duration: e.target.value,\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    if (this.state.local) {\n      localStorage.setItem(this.state._id, JSON.stringify(this.state));\n      this.setState({ redirect: \"/workouts\" });\n    } else {\n      const baseUrl =\n        process.env.NODE_ENV === \"production\"\n          ? \"https://intense-ridge-39955.herokuapp.com/\"\n          : \"http://localhost:4000/\";\n\n      const obj = {\n        workout_title: this.state.workout_title,\n        date: this.state.date,\n        duration: this.state.duration,\n        exercises: this.state.exercises,\n      };\n      axios\n        .patch(baseUrl + \"workouts/\" + this.props.match.params.id, obj)\n        .then((res) => {\n          this.setState({ redirect: \"/workouts\" });\n        })\n        .catch((error) => {\n          alert(\n            error?.response?.data.workouts.map((message) => {\n              return message.split(\":\")[1];\n            })\n          );\n\n          console.log(error?.response);\n        });\n    }\n  }\n\n  deleteWorkout(e) {\n    e.preventDefault();\n    if (this.state.local) {\n      localStorage.removeItem(this.state._id);\n      console.log(\"Workout successfully deleted!\");\n      this.setState({ redirect: \"/workouts\" });\n    } else {\n      const baseUrl =\n      process.env.NODE_ENV === \"production\"\n        ? \"https://intense-ridge-39955.herokuapp.com/\"\n        : \"http://localhost:4000/\";\n      const obj = {\n        workout_title: this.state.workout_title,\n        date: this.state.date,\n        duration: this.state.duration,\n        exercises: this.state.exercises,\n      };\n      axios\n      .delete(baseUrl + \"workouts/\" + this.props.match.params.id, obj)\n      .then((res) => {\n        console.log(\"Workout successfully deleted!\");\n        this.setState({ redirect: \"/workouts\" });\n      });\n    }\n  }\n\n  render() {\n    if (this.state?.redirect) {\n      setTimeout(500);\n      return <Redirect to={this.state.redirect} />;\n    }\n    return (\n      <UpdateDiv>\n        <Title\n          className=\"text-center text-white\"\n          style={{ marginBottom: \"35px\" }}\n        >\n          Update Workout\n        </Title>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <label>Title: </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.workout_title}\n              onChange={this.onChangeWorkoutTitle}\n            />\n          </div>\n          {this.state.exercises.map((element, key) => {\n            return (\n              <div className=\"form-group\">\n                <label>Exercise {key + 1} Name:</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={element.name || \"\"}\n                  onChange={this.onChangeExerciseName.bind(this, key)}\n                />\n                <label>Exercise {key + 1} Sets:</label>\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  className=\"form-control\"\n                  value={this.state.exercises[key].sets || \"\"}\n                  onChange={this.onChangeExerciseSets.bind(this, key)}\n                />\n                <label>Exercise {key + 1} Reps:</label>\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  className=\"form-control\"\n                  value={this.state.exercises[key].reps || \"\"}\n                  onChange={this.onChangeExerciseReps.bind(this, key)}\n                />\n                <label>Exercise {key + 1} Weight:</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={this.state.exercises[key].weight || \"\"}\n                  onChange={this.onChangeExerciseWeight.bind(this, key)}\n                />\n              </div>\n            );\n          })}\n          <div className=\"form-group\">\n            <label>Duration (in mins): </label>\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              value={this.state.duration}\n              min=\"1\"\n              onChange={this.onChangeDuration}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <input\n              type=\"submit\"\n              value=\"Update workout\"\n              className=\"btn btn-primary\"\n            />\n          </div>\n          <Button size=\"sm\" variant=\"danger\" onClick={this.deleteWorkout}>\n            Delete\n          </Button>\n        </form>\n      </UpdateDiv>\n    );\n  }\n}\n","/Users/brentonjackson/code/workout-manager/frontend/src/components/create-workout.component.js",[],"/Users/brentonjackson/code/workout-manager/frontend/src/components/Dashboard.js",[],"/Users/brentonjackson/code/workout-manager/frontend/src/components/workout-list.component.js",["37"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Card, CardDeck } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport DataGrid from 'react-data-grid';\n\nconst ResponsiveCardDeck = styled(CardDeck)`\n  @media (max-width: 1199px) {\n    justify-content: center;\n  }\n  @media (min-width: 576px) {\n    margin-right: 0;\n    margin-left: 0;\n  }\n  @media (min-width: 1200px) {\n    justify-content: center;\n  }\n`;\n\nconst Title = styled.h3`\n  margin: 50px 0 50px;\n\n  @media (min-width: 992px) {\n    margin: 50px 0 100px;\n  }\n`;\n\nconst Workout = ({ workout }) => (\n  <Card\n    style={{\n      width: \"18rem\",\n      maxWidth: \"300px\",\n      marginBottom: \"15px\",\n      marginLeft: \"0\",\n      flex: \"auto\",\n      boxShadow: \"-7px 7px 8px #00000026\",\n    }}\n  >\n    <Card.Body>\n      <Card.Title>{workout.workout_title}</Card.Title>\n      {workout.exercises.map((element, i) => {\n        return (\n          <>\n            <Card.Text>\n              Exercise {i + 1}: {element.name}\n              <br></br>\n              {element.sets} sets x {element.reps} reps\n              <br></br>\n              {element.weight ? \n              'Weight: ' + element.weight :  \n              null}\n            </Card.Text>\n          </>\n        );\n      })}\n      {workout.duration !== undefined ? (\n        <Card.Text>Duration: {workout.duration}</Card.Text>\n      ) : (\n        \"\"\n      )}\n      <Card.Link>\n        <Link to={\"edit/\" + workout._id}>Edit</Link>\n      </Card.Link>\n    </Card.Body>\n    <Card.Footer>\n      <small className=\"text-muted\">\n        {new Date(workout.date).toLocaleDateString(\"en-US\", {\n          timeZone: \"UTC\",\n          weekday: \"long\",\n          year: \"numeric\",\n          month: \"long\",\n          day: \"numeric\",\n        })}\n      </small>\n    </Card.Footer>\n  </Card>\n);\n\nconst columns = [\n  { key: '_id', name: 'ID', defaultVisible: false },\n  { key: 'workout_title', name: 'Title' },\n  { key: 'duration', name: 'Duration'},\n  { key: 'date', name: 'Date', sortable: true, \n    formatter({ row }) {\n      return <>{new Date(row.date).toLocaleDateString(\"en-US\", {\n        timeZone: \"UTC\",\n        weekday: \"long\",\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n      })}</>;\n    }},\n];\n\nconst rows = [\n  { id: 0, title: 'Example' },\n  { id: 1, title: 'Demo' }\n];\n\nexport default class WorkoutList extends Component {\n  constructor(props) {\n    super(props);\n    const baseUrl =\n      process.env.NODE_ENV === \"production\"\n        ? \"https://intense-ridge-39955.herokuapp.com/\"\n        : \"http://localhost:4000/\";\n\n    let workouts = axios\n      .get(baseUrl + \"workouts/\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((response) => {\n        return response.data.workouts;\n      });\n    this.state = {\n      workouts: workouts,\n      redirect: null,\n      isLoading: false,\n      grid: true,\n      table: false\n    };\n  }\n\n  componentDidMount() {\n    this._loadWorkouts();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n    this.timer = null;\n  }\n\n  //   componentDidUpdate() {\n  //     this._loadWorkouts();\n  //   }\n\n  toggleGrid() {\n    console.log(this.state)\n    this.setState( {grid: !this.state.grid, table: !this.state.table})\n  }\n\n  async _loadWorkouts() {\n    const baseUrl =\n      process.env.NODE_ENV === \"production\"\n        ? \"https://intense-ridge-39955.herokuapp.com/\"\n        : \"http://localhost:4000/\";\n    this.setState({ ...this.state, isLoading: true });\n\n    await axios\n      .get(baseUrl + \"workouts/\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((response) => {\n        this.setState({ workouts: response.data.workouts, isLoading: false });\n        return response.data.workouts;\n      })\n      .catch(function (error) {\n        if (this?.state) {\n          this.setState({ ...this.state, isLoading: false });\n        }\n      });\n      console.log(this.state)\n\n      let firstWorkouts = [];\n      let keys;\n      localStorage.length > 0 ?  keys = Object.keys(localStorage) : keys = null;\n      if (keys) {\n        let i = keys.length;\n        while ( i-- ) {\n          firstWorkouts.push( JSON.parse(localStorage.getItem(keys[i]) ));\n        }\n        firstWorkouts.forEach(workout => this.state.workouts.push(workout))\n        this.setState({workouts: [...this.state.workouts], isLoading: false}) ;\n        console.log(this.state)\n      }\n\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Redirect to={this.state.redirect} />;\n    }\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          width: \"100%\"\n        }}\n      >\n        <Title className=\"text-center text-white\"> Workouts</Title>\n        <div className=\"button-container\" style={{marginBottom: '10px'}}>\n        <button type=\"button\" class={this.state.grid ? \"active btn btn-outline-success\" : \"btn btn-outline-success\"}  onClick={this.toggleGrid.bind(this)}>Grid</button>\n        <button type=\"button\" class={this.state.table ? \"active btn btn-outline-primary\" : \"btn btn-outline-primary\"}  onClick={this.toggleGrid.bind(this)}>Table</button>\n        </div>\n        {this.state.grid ? \n          <ResponsiveCardDeck>\n            <h4 className=\"text-center text-white\">\n              {this.state.isLoading ? \"Loading workouts.....\" : \"\"}\n            </h4>\n            {this.state.isLoading\n              ? \"\"\n              : this.state.workouts\n              ? this.state.workouts.length > 0\n                ? this.state.workouts.map((currentWorkout, i) => (\n                    <Workout workout={currentWorkout} key={i} />\n                  ))\n                : <p className=\"text-white\">\"Go ahead and track a workout!\"</p>\n              : \"\"}\n        </ResponsiveCardDeck>\n        : <DataGrid \n            columns={columns} \n            rows={this.state?.workouts} \n            defaultColumnOptions={{\n              sortable: true,\n              resizable: true\n            }} \n            sortable={true} \n           />\n        }\n        \n      </div>\n    );\n  }\n}\n","/Users/brentonjackson/code/workout-manager/frontend/src/components/WorkoutLog.js",["38","39","40","41","42","43"],"import React, {useState, useEffect} from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\n\n\n\nconst Screen = styled.div`\n  height: 100%;\n  padding-top: 100px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  @media (min-width: 993px) {\n    padding-top: 200px;\n  }\n`;\nconst measurements = ['date', 'bodyweight', ['exercise', ['weight', 'sets', 'reps']]]\n/*\nExample Workout\nDate: ...\nBodyWeight: ...\nExercise: weight1 - 1 x 10\n          weight2 - 1 x 5\n          weight3 - 1 x 5\n          weight4 - 1 x 6\n          weight5 - 1 x 6\n          weight6 - 1 x 4\nor:\n\nExample Workout\nDate: ...\nBodyWeight: ...\nExercise: set1 - 45 x 10\n          set2 - 95 x 5\n          set3 - 115 x 5\n          set4 - 185 x 6\n          set5 - 205 x 6\n          set6 - 215 x 4\n\n*/\nconst rowHeads = ['']\nfunction WorkoutLog(props) {\n\n  return (\n    <>\n      <div>\n        test\n      </div>\n      <table>\n        <thead>\n\n        </thead>\n        <tbody>\n          <tr>\n            {}\n          </tr>\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nexport default WorkoutLog;\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":55,"column":11,"nodeType":"50","endLine":55,"endColumn":21},{"ruleId":"51","severity":1,"message":"52","line":97,"column":7,"nodeType":"53","messageId":"54","endLine":97,"endColumn":11},{"ruleId":"51","severity":1,"message":"55","line":1,"column":16,"nodeType":"53","messageId":"54","endLine":1,"endColumn":24},{"ruleId":"51","severity":1,"message":"56","line":1,"column":26,"nodeType":"53","messageId":"54","endLine":1,"endColumn":35},{"ruleId":"51","severity":1,"message":"57","line":2,"column":10,"nodeType":"53","messageId":"54","endLine":2,"endColumn":14},{"ruleId":"51","severity":1,"message":"58","line":8,"column":7,"nodeType":"53","messageId":"54","endLine":8,"endColumn":13},{"ruleId":"51","severity":1,"message":"59","line":19,"column":7,"nodeType":"53","messageId":"54","endLine":19,"endColumn":19},{"ruleId":"51","severity":1,"message":"60","line":43,"column":7,"nodeType":"53","messageId":"54","endLine":43,"endColumn":15},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unused-vars","'rows' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'Card' is defined but never used.","'Screen' is assigned a value but never used.","'measurements' is assigned a value but never used.","'rowHeads' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]